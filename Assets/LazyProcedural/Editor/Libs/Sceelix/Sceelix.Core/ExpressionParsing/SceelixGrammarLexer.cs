//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g 2017-01-23 16:45:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

#pragma warning disable 3021

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Sceelix.Designer.Graphs.ExpressionParsing
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SceelixGrammarLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int AND=4;
	public const int ATTRID=5;
	public const int BOOLEAN=6;
	public const int CHAR=7;
	public const int CHECK=8;
	public const int COLON=9;
	public const int COMMENT=10;
	public const int DIV=11;
	public const int DOT=12;
	public const int DOUBLE=13;
	public const int EQUALS=14;
	public const int ESC_SEQ=15;
	public const int EXPONENT=16;
	public const int FLOAT=17;
	public const int GT=18;
	public const int GTEQ=19;
	public const int HEX_DIGIT=20;
	public const int ID=21;
	public const int INT=22;
	public const int LOCAL=23;
	public const int LT=24;
	public const int LTEQ=25;
	public const int MINUS=26;
	public const int MOD=27;
	public const int MULT=28;
	public const int NOT=29;
	public const int NOTEQUALS=30;
	public const int OCTAL_ESC=31;
	public const int OR=32;
	public const int PLUS=33;
	public const int SPECIALID=34;
	public const int SQBRACKETCLOSE=35;
	public const int SQBRACKETOPEN=36;
	public const int STRING=37;
	public const int TYPE=38;
	public const int UNICODE_ESC=39;
	public const int WS=40;

    // delegates
    // delegators

	public SceelixGrammarLexer()
	{
		OnCreated();
	}

	public SceelixGrammarLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SceelixGrammarLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 1);
		TraceIn("T__41", 1);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:9:7: ( '$' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:9:9: '$'
			{
			DebugLocation(9, 9);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 1);
			LeaveRule("T__41", 1);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 2);
		TraceIn("T__42", 2);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:10:7: ( '(' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:10:9: '('
			{
			DebugLocation(10, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 2);
			LeaveRule("T__42", 2);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 3);
		TraceIn("T__43", 3);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:11:7: ( ')' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:11:9: ')'
			{
			DebugLocation(11, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 3);
			LeaveRule("T__43", 3);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 4);
		TraceIn("T__44", 4);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:12:7: ( ',' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:12:9: ','
			{
			DebugLocation(12, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 4);
			LeaveRule("T__44", 4);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 5);
		TraceIn("T__45", 5);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:13:7: ( '@' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:13:9: '@'
			{
			DebugLocation(13, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 5);
			LeaveRule("T__45", 5);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 6);
		TraceIn("T__46", 6);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:14:7: ( '@@' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:14:9: '@@'
			{
			DebugLocation(14, 9);
			Match("@@"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 6);
			LeaveRule("T__46", 6);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_CHECK();
	partial void LeaveRule_CHECK();

	// $ANTLR start "CHECK"
	[GrammarRule("CHECK")]
	private void mCHECK()
	{
		EnterRule_CHECK();
		EnterRule("CHECK", 7);
		TraceIn("CHECK", 7);
		try
		{
			int _type = CHECK;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:186:8: ( '?' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:186:11: '?'
			{
			DebugLocation(186, 11);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHECK", 7);
			LeaveRule("CHECK", 7);
			LeaveRule_CHECK();
		}
	}
	// $ANTLR end "CHECK"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 8);
		TraceIn("COLON", 8);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:188:8: ( ':' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:189:3: ':'
			{
			DebugLocation(189, 3);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 8);
			LeaveRule("COLON", 8);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_SQBRACKETOPEN();
	partial void LeaveRule_SQBRACKETOPEN();

	// $ANTLR start "SQBRACKETOPEN"
	[GrammarRule("SQBRACKETOPEN")]
	private void mSQBRACKETOPEN()
	{
		EnterRule_SQBRACKETOPEN();
		EnterRule("SQBRACKETOPEN", 9);
		TraceIn("SQBRACKETOPEN", 9);
		try
		{
			int _type = SQBRACKETOPEN;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:192:2: ( '[' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:192:5: '['
			{
			DebugLocation(192, 5);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SQBRACKETOPEN", 9);
			LeaveRule("SQBRACKETOPEN", 9);
			LeaveRule_SQBRACKETOPEN();
		}
	}
	// $ANTLR end "SQBRACKETOPEN"

	partial void EnterRule_SQBRACKETCLOSE();
	partial void LeaveRule_SQBRACKETCLOSE();

	// $ANTLR start "SQBRACKETCLOSE"
	[GrammarRule("SQBRACKETCLOSE")]
	private void mSQBRACKETCLOSE()
	{
		EnterRule_SQBRACKETCLOSE();
		EnterRule("SQBRACKETCLOSE", 10);
		TraceIn("SQBRACKETCLOSE", 10);
		try
		{
			int _type = SQBRACKETCLOSE;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:195:2: ( ']' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:195:5: ']'
			{
			DebugLocation(195, 5);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SQBRACKETCLOSE", 10);
			LeaveRule("SQBRACKETCLOSE", 10);
			LeaveRule_SQBRACKETCLOSE();
		}
	}
	// $ANTLR end "SQBRACKETCLOSE"

	partial void EnterRule_SPECIALID();
	partial void LeaveRule_SPECIALID();

	// $ANTLR start "SPECIALID"
	[GrammarRule("SPECIALID")]
	private void mSPECIALID()
	{
		EnterRule_SPECIALID();
		EnterRule("SPECIALID", 11);
		TraceIn("SPECIALID", 11);
		try
		{
			int _type = SPECIALID;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:198:2: ( '{' (~ ( '{' | '}' ) )* '}' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:198:5: '{' (~ ( '{' | '}' ) )* '}'
			{
			DebugLocation(198, 5);
			Match('{'); 
			DebugLocation(198, 9);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:198:9: (~ ( '{' | '}' ) )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='\u0000' && LA1_0<='z')||LA1_0=='|'||(LA1_0>='~' && LA1_0<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
					{
					DebugLocation(198, 9);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(198, 21);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPECIALID", 11);
			LeaveRule("SPECIALID", 11);
			LeaveRule_SPECIALID();
		}
	}
	// $ANTLR end "SPECIALID"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 12);
		TraceIn("DOT", 12);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:200:6: ( '.' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:200:9: '.'
			{
			DebugLocation(200, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 12);
			LeaveRule("DOT", 12);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 13);
		TraceIn("OR", 13);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:202:7: ( '||' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:202:13: '||'
			{
			DebugLocation(202, 13);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 13);
			LeaveRule("OR", 13);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 14);
		TraceIn("AND", 14);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:204:7: ( '&&' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:204:13: '&&'
			{
			DebugLocation(204, 13);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 14);
			LeaveRule("AND", 14);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 15);
		TraceIn("EQUALS", 15);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:206:13: ( '==' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:206:18: '=='
			{
			DebugLocation(206, 18);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 15);
			LeaveRule("EQUALS", 15);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_NOTEQUALS();
	partial void LeaveRule_NOTEQUALS();

	// $ANTLR start "NOTEQUALS"
	[GrammarRule("NOTEQUALS")]
	private void mNOTEQUALS()
	{
		EnterRule_NOTEQUALS();
		EnterRule("NOTEQUALS", 16);
		TraceIn("NOTEQUALS", 16);
		try
		{
			int _type = NOTEQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:207:13: ( '!=' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:207:18: '!='
			{
			DebugLocation(207, 18);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUALS", 16);
			LeaveRule("NOTEQUALS", 16);
			LeaveRule_NOTEQUALS();
		}
	}
	// $ANTLR end "NOTEQUALS"

	partial void EnterRule_GTEQ();
	partial void LeaveRule_GTEQ();

	// $ANTLR start "GTEQ"
	[GrammarRule("GTEQ")]
	private void mGTEQ()
	{
		EnterRule_GTEQ();
		EnterRule("GTEQ", 17);
		TraceIn("GTEQ", 17);
		try
		{
			int _type = GTEQ;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:209:7: ( '>=' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:209:12: '>='
			{
			DebugLocation(209, 12);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTEQ", 17);
			LeaveRule("GTEQ", 17);
			LeaveRule_GTEQ();
		}
	}
	// $ANTLR end "GTEQ"

	partial void EnterRule_LTEQ();
	partial void LeaveRule_LTEQ();

	// $ANTLR start "LTEQ"
	[GrammarRule("LTEQ")]
	private void mLTEQ()
	{
		EnterRule_LTEQ();
		EnterRule("LTEQ", 18);
		TraceIn("LTEQ", 18);
		try
		{
			int _type = LTEQ;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:210:7: ( '<=' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:210:12: '<='
			{
			DebugLocation(210, 12);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTEQ", 18);
			LeaveRule("LTEQ", 18);
			LeaveRule_LTEQ();
		}
	}
	// $ANTLR end "LTEQ"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 19);
		TraceIn("LT", 19);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:212:7: ( '<' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:212:12: '<'
			{
			DebugLocation(212, 12);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 19);
			LeaveRule("LT", 19);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 20);
		TraceIn("GT", 20);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:213:7: ( '>' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:213:12: '>'
			{
			DebugLocation(213, 12);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 20);
			LeaveRule("GT", 20);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 21);
		TraceIn("NOT", 21);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:215:5: ( '!' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:215:8: '!'
			{
			DebugLocation(215, 8);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 21);
			LeaveRule("NOT", 21);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 22);
		TraceIn("PLUS", 22);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:217:7: ( '+' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:217:12: '+'
			{
			DebugLocation(217, 12);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 22);
			LeaveRule("PLUS", 22);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 23);
		TraceIn("MINUS", 23);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:218:7: ( '-' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:218:12: '-'
			{
			DebugLocation(218, 12);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 23);
			LeaveRule("MINUS", 23);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 24);
		TraceIn("MULT", 24);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:219:7: ( '*' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:219:12: '*'
			{
			DebugLocation(219, 12);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 24);
			LeaveRule("MULT", 24);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 25);
		TraceIn("DIV", 25);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:220:7: ( '/' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:220:12: '/'
			{
			DebugLocation(220, 12);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 25);
			LeaveRule("DIV", 25);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 26);
		TraceIn("MOD", 26);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:221:7: ( '%' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:221:12: '%'
			{
			DebugLocation(221, 12);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 26);
			LeaveRule("MOD", 26);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_BOOLEAN();
	partial void LeaveRule_BOOLEAN();

	// $ANTLR start "BOOLEAN"
	[GrammarRule("BOOLEAN")]
	private void mBOOLEAN()
	{
		EnterRule_BOOLEAN();
		EnterRule("BOOLEAN", 27);
		TraceIn("BOOLEAN", 27);
		try
		{
			int _type = BOOLEAN;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:224:5: ( 'true' | 'false' )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='t'))
			{
				alt2 = 1;
			}
			else if ((LA2_0=='f'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:224:10: 'true'
				{
				DebugLocation(224, 10);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:225:10: 'false'
				{
				DebugLocation(225, 10);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOLEAN", 27);
			LeaveRule("BOOLEAN", 27);
			LeaveRule_BOOLEAN();
		}
	}
	// $ANTLR end "BOOLEAN"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 28);
		TraceIn("ID", 28);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:229:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:229:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(229, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(229, 31);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:229:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
					{
					DebugLocation(229, 31);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 28);
			LeaveRule("ID", 28);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_ATTRID();
	partial void LeaveRule_ATTRID();

	// $ANTLR start "ATTRID"
	[GrammarRule("ATTRID")]
	private void mATTRID()
	{
		EnterRule_ATTRID();
		EnterRule("ATTRID", 29);
		TraceIn("ATTRID", 29);
		try
		{
			int _type = ATTRID;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:232:9: ( ( LOCAL )? ID )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:232:11: ( LOCAL )? ID
			{
			DebugLocation(232, 11);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:232:11: ( LOCAL )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='l'))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1=='o'))
				{
					int LA4_3 = input.LA(3);

					if ((LA4_3=='c'))
					{
						int LA4_4 = input.LA(4);

						if ((LA4_4=='a'))
						{
							int LA4_5 = input.LA(5);

							if ((LA4_5=='l'))
							{
								int LA4_6 = input.LA(6);

								if ((LA4_6==':'))
								{
									alt4 = 1;
								}
							}
						}
					}
				}
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:232:11: LOCAL
				{
				DebugLocation(232, 11);
				mLOCAL(); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(232, 18);
			mID(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATTRID", 29);
			LeaveRule("ATTRID", 29);
			LeaveRule_ATTRID();
		}
	}
	// $ANTLR end "ATTRID"

	partial void EnterRule_LOCAL();
	partial void LeaveRule_LOCAL();

	// $ANTLR start "LOCAL"
	[GrammarRule("LOCAL")]
	private void mLOCAL()
	{
		EnterRule_LOCAL();
		EnterRule("LOCAL", 30);
		TraceIn("LOCAL", 30);
		try
		{
			int _type = LOCAL;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:235:8: ( 'local:' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:235:10: 'local:'
			{
			DebugLocation(235, 10);
			Match("local:"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOCAL", 30);
			LeaveRule("LOCAL", 30);
			LeaveRule_LOCAL();
		}
	}
	// $ANTLR end "LOCAL"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 31);
		TraceIn("INT", 31);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:238:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:238:7: ( '0' .. '9' )+
			{
			DebugLocation(238, 7);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:238:7: ( '0' .. '9' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='9')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
					{
					DebugLocation(238, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 31);
			LeaveRule("INT", 31);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 32);
		TraceIn("FLOAT", 32);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )? 'f' | '.' ( '0' .. '9' )+ ( EXPONENT )? 'f' | ( '0' .. '9' )+ ( EXPONENT )? 'f' )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			try
			{
				alt13 = dfa13.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )? 'f'
				{
				DebugLocation(242, 9);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:9: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(242, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(242, 21);
				Match('.'); 
				DebugLocation(242, 25);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:25: ( '0' .. '9' )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(242, 25);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(242, 37);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:37: ( EXPONENT )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='E'||LA8_0=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:242:37: EXPONENT
					{
					DebugLocation(242, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(242, 47);
				Match('f'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:243:9: '.' ( '0' .. '9' )+ ( EXPONENT )? 'f'
				{
				DebugLocation(243, 9);
				Match('.'); 
				DebugLocation(243, 13);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:243:13: ( '0' .. '9' )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if (((LA9_0>='0' && LA9_0<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(243, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(243, 25);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:243:25: ( EXPONENT )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='E'||LA10_0=='e'))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:243:25: EXPONENT
					{
					DebugLocation(243, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(243, 35);
				Match('f'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:244:9: ( '0' .. '9' )+ ( EXPONENT )? 'f'
				{
				DebugLocation(244, 9);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:244:9: ( '0' .. '9' )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='0' && LA11_0<='9')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(244, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(244, 21);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:244:21: ( EXPONENT )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0=='E'||LA12_0=='e'))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:244:21: EXPONENT
					{
					DebugLocation(244, 21);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(244, 31);
				Match('f'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 32);
			LeaveRule("FLOAT", 32);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_DOUBLE();
	partial void LeaveRule_DOUBLE();

	// $ANTLR start "DOUBLE"
	[GrammarRule("DOUBLE")]
	private void mDOUBLE()
	{
		EnterRule_DOUBLE();
		EnterRule("DOUBLE", 33);
		TraceIn("DOUBLE", 33);
		try
		{
			int _type = DOUBLE;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ ( EXPONENT )? )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			try
			{
				alt21 = dfa21.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(248, 9);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:9: ( '0' .. '9' )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if (((LA14_0>='0' && LA14_0<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(248, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(248, 21);
				Match('.'); 
				DebugLocation(248, 25);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:25: ( '0' .. '9' )+
				int cnt15=0;
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if (((LA15_0>='0' && LA15_0<='9')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(248, 25);
						input.Consume();


						}
						break;

					default:
						if (cnt15 >= 1)
							goto loop15;

						EarlyExitException eee15 = new EarlyExitException( 15, input );
						DebugRecognitionException(eee15);
						throw eee15;
					}
					cnt15++;
				}
				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(248, 37);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:37: ( EXPONENT )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0=='E'||LA16_0=='e'))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:248:37: EXPONENT
					{
					DebugLocation(248, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:249:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(249, 9);
				Match('.'); 
				DebugLocation(249, 13);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:249:13: ( '0' .. '9' )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if (((LA17_0>='0' && LA17_0<='9')))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(249, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(249, 25);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:249:25: ( EXPONENT )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0=='E'||LA18_0=='e'))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:249:25: EXPONENT
					{
					DebugLocation(249, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:250:9: ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(250, 9);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:250:9: ( '0' .. '9' )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if (((LA19_0>='0' && LA19_0<='9')))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(250, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(250, 21);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:250:21: ( EXPONENT )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0=='E'||LA20_0=='e'))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:250:21: EXPONENT
					{
					DebugLocation(250, 21);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE", 33);
			LeaveRule("DOUBLE", 33);
			LeaveRule_DOUBLE();
		}
	}
	// $ANTLR end "DOUBLE"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 34);
		TraceIn("COMMENT", 34);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:254:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0=='/'))
			{
				int LA25_1 = input.LA(2);

				if ((LA25_1=='/'))
				{
					alt25 = 1;
				}
				else if ((LA25_1=='*'))
				{
					alt25 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:254:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(254, 9);
				Match("//"); 

				DebugLocation(254, 14);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:254:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if (((LA22_0>='\u0000' && LA22_0<='\t')||(LA22_0>='\u000B' && LA22_0<='\f')||(LA22_0>='\u000E' && LA22_0<='\uFFFF')))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
						{
						DebugLocation(254, 14);
						input.Consume();


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(254, 28);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:254:28: ( '\\r' )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0=='\r'))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:254:28: '\\r'
					{
					DebugLocation(254, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(254, 34);
				Match('\n'); 
				DebugLocation(254, 39);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:255:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(255, 9);
				Match("/*"); 

				DebugLocation(255, 14);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:255:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0=='*'))
					{
						int LA24_1 = input.LA(2);

						if ((LA24_1=='/'))
						{
							alt24 = 2;
						}
						else if (((LA24_1>='\u0000' && LA24_1<='.')||(LA24_1>='0' && LA24_1<='\uFFFF')))
						{
							alt24 = 1;
						}


					}
					else if (((LA24_0>='\u0000' && LA24_0<=')')||(LA24_0>='+' && LA24_0<='\uFFFF')))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:255:42: .
						{
						DebugLocation(255, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(255, 47);
				Match("*/"); 

				DebugLocation(255, 52);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 34);
			LeaveRule("COMMENT", 34);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 35);
		TraceIn("WS", 35);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:258:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:258:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(258, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(262, 11);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 35);
			LeaveRule("WS", 35);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 36);
		TraceIn("STRING", 36);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:270:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:270:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(270, 8);
			Match('\"'); 
			DebugLocation(270, 12);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:270:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=3;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0=='\\'))
				{
					alt26 = 1;
				}
				else if (((LA26_0>='\u0000' && LA26_0<='!')||(LA26_0>='#' && LA26_0<='[')||(LA26_0>=']' && LA26_0<='\uFFFF')))
				{
					alt26 = 2;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:270:14: ESC_SEQ
					{
					DebugLocation(270, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:270:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(270, 24);
					input.Consume();


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(270, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 36);
			LeaveRule("STRING", 36);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 37);
		TraceIn("CHAR", 37);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:273:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:273:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(273, 8);
			Match('\''); 
			DebugLocation(273, 13);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:273:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0=='\\'))
			{
				alt27 = 1;
			}
			else if (((LA27_0>='\u0000' && LA27_0<='&')||(LA27_0>='(' && LA27_0<='[')||(LA27_0>=']' && LA27_0<='\uFFFF')))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:273:15: ESC_SEQ
				{
				DebugLocation(273, 15);
				mESC_SEQ(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:273:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(273, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(273, 40);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 37);
			LeaveRule("CHAR", 37);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 38);
		TraceIn("EXPONENT", 38);
		try
		{
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:278:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:278:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(278, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(278, 22);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:278:22: ( '+' | '-' )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0=='+'||LA28_0=='-'))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
				{
				DebugLocation(278, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(278, 33);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:278:33: ( '0' .. '9' )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>='0' && LA29_0<='9')))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
					{
					DebugLocation(278, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 38);
			LeaveRule("EXPONENT", 38);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 39);
		TraceIn("HEX_DIGIT", 39);
		try
		{
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:281:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:
			{
			DebugLocation(281, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 39);
			LeaveRule("HEX_DIGIT", 39);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 40);
		TraceIn("ESC_SEQ", 40);
		try
		{
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:286:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt30=3;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt30 = 1;
					}
					break;
				case 'u':
					{
					alt30 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt30 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:286:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(286, 9);
				Match('\\'); 
				DebugLocation(286, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:287:9: UNICODE_ESC
				{
				DebugLocation(287, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:288:9: OCTAL_ESC
				{
				DebugLocation(288, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 40);
			LeaveRule("ESC_SEQ", 40);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 41);
		TraceIn("OCTAL_ESC", 41);
		try
		{
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:293:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt31=3;
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0=='\\'))
			{
				int LA31_1 = input.LA(2);

				if (((LA31_1>='0' && LA31_1<='3')))
				{
					int LA31_2 = input.LA(3);

					if (((LA31_2>='0' && LA31_2<='7')))
					{
						int LA31_4 = input.LA(4);

						if (((LA31_4>='0' && LA31_4<='7')))
						{
							alt31 = 1;
						}
						else
						{
							alt31 = 2;
						}
					}
					else
					{
						alt31 = 3;
					}
				}
				else if (((LA31_1>='4' && LA31_1<='7')))
				{
					int LA31_3 = input.LA(3);

					if (((LA31_3>='0' && LA31_3<='7')))
					{
						alt31 = 2;
					}
					else
					{
						alt31 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:293:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(293, 9);
				Match('\\'); 
				DebugLocation(293, 14);
				input.Consume();

				DebugLocation(293, 25);
				input.Consume();

				DebugLocation(293, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:294:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(294, 9);
				Match('\\'); 
				DebugLocation(294, 14);
				input.Consume();

				DebugLocation(294, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:295:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(295, 9);
				Match('\\'); 
				DebugLocation(295, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 41);
			LeaveRule("OCTAL_ESC", 41);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 42);
		TraceIn("UNICODE_ESC", 42);
		try
		{
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:300:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:300:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(300, 9);
			Match('\\'); 
			DebugLocation(300, 14);
			Match('u'); 
			DebugLocation(300, 18);
			mHEX_DIGIT(); 
			DebugLocation(300, 28);
			mHEX_DIGIT(); 
			DebugLocation(300, 38);
			mHEX_DIGIT(); 
			DebugLocation(300, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 42);
			LeaveRule("UNICODE_ESC", 42);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:8: ( T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | CHECK | COLON | SQBRACKETOPEN | SQBRACKETCLOSE | SPECIALID | DOT | OR | AND | EQUALS | NOTEQUALS | GTEQ | LTEQ | LT | GT | NOT | PLUS | MINUS | MULT | DIV | MOD | BOOLEAN | ID | ATTRID | LOCAL | INT | FLOAT | DOUBLE | COMMENT | WS | STRING | CHAR )
		int alt32=37;
		try { DebugEnterDecision(32, false);
		try
		{
			alt32 = dfa32.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(32); }
		switch (alt32)
		{
		case 1:
			DebugEnterAlt(1);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:10: T__41
			{
			DebugLocation(1, 10);
			mT__41(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:16: T__42
			{
			DebugLocation(1, 16);
			mT__42(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:22: T__43
			{
			DebugLocation(1, 22);
			mT__43(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:28: T__44
			{
			DebugLocation(1, 28);
			mT__44(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:34: T__45
			{
			DebugLocation(1, 34);
			mT__45(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:40: T__46
			{
			DebugLocation(1, 40);
			mT__46(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:46: CHECK
			{
			DebugLocation(1, 46);
			mCHECK(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:52: COLON
			{
			DebugLocation(1, 52);
			mCOLON(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:58: SQBRACKETOPEN
			{
			DebugLocation(1, 58);
			mSQBRACKETOPEN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:72: SQBRACKETCLOSE
			{
			DebugLocation(1, 72);
			mSQBRACKETCLOSE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:87: SPECIALID
			{
			DebugLocation(1, 87);
			mSPECIALID(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:97: DOT
			{
			DebugLocation(1, 97);
			mDOT(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:101: OR
			{
			DebugLocation(1, 101);
			mOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:104: AND
			{
			DebugLocation(1, 104);
			mAND(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:108: EQUALS
			{
			DebugLocation(1, 108);
			mEQUALS(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:115: NOTEQUALS
			{
			DebugLocation(1, 115);
			mNOTEQUALS(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:125: GTEQ
			{
			DebugLocation(1, 125);
			mGTEQ(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:130: LTEQ
			{
			DebugLocation(1, 130);
			mLTEQ(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:135: LT
			{
			DebugLocation(1, 135);
			mLT(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:138: GT
			{
			DebugLocation(1, 138);
			mGT(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:141: NOT
			{
			DebugLocation(1, 141);
			mNOT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:145: PLUS
			{
			DebugLocation(1, 145);
			mPLUS(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:150: MINUS
			{
			DebugLocation(1, 150);
			mMINUS(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:156: MULT
			{
			DebugLocation(1, 156);
			mMULT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:161: DIV
			{
			DebugLocation(1, 161);
			mDIV(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:165: MOD
			{
			DebugLocation(1, 165);
			mMOD(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:169: BOOLEAN
			{
			DebugLocation(1, 169);
			mBOOLEAN(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:177: ID
			{
			DebugLocation(1, 177);
			mID(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:180: ATTRID
			{
			DebugLocation(1, 180);
			mATTRID(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:187: LOCAL
			{
			DebugLocation(1, 187);
			mLOCAL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:193: INT
			{
			DebugLocation(1, 193);
			mINT(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:197: FLOAT
			{
			DebugLocation(1, 197);
			mFLOAT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:203: DOUBLE
			{
			DebugLocation(1, 203);
			mDOUBLE(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:210: COMMENT
			{
			DebugLocation(1, 210);
			mCOMMENT(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:218: WS
			{
			DebugLocation(1, 218);
			mWS(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:221: STRING
			{
			DebugLocation(1, 221);
			mSTRING(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// E:\\My .NET Projects\\Sceelix\\Source\\Sceelix.Designer.Graphs\\ExpressionParsing\\SceelixGrammar.g:1:228: CHAR
			{
			DebugLocation(1, 228);
			mCHAR(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;
	DFA21 dfa21;
	DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this);
		dfa21 = new DFA21(this);
		dfa32 = new DFA32(this);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x5\xFFFF";
		private const string DFA13_eofS =
			"\x5\xFFFF";
		private const string DFA13_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA13_maxS =
			"\x1\x39\x1\x66\x3\xFFFF";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA13_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x2\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "241:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )? 'f' | '.' ( '0' .. '9' )+ ( EXPONENT )? 'f' | ( '0' .. '9' )+ ( EXPONENT )? 'f' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x1\xFFFF\x1\x4\x3\xFFFF";
		private const string DFA21_eofS =
			"\x5\xFFFF";
		private const string DFA21_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA21_maxS =
			"\x2\x39\x3\xFFFF";
		private const string DFA21_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA21_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1",
				"",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "247:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )+ ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ ( EXPONENT )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x5\xFFFF\x1\x20\x5\xFFFF\x1\x21\x3\xFFFF\x1\x24\x1\x26\x1\x28\x3\xFFFF"+
			"\x1\x2A\x1\xFFFF\x4\x2D\x1\x30\x6\xFFFF\x1\x35\x8\xFFFF\x2\x2D\x1\xFFFF"+
			"\x2\x2D\x6\xFFFF\x3\x2D\x1\x35\x1\xFFFF\x1\x35\x1\xFFFF\x1\x35\x1\x42"+
			"\x2\x2D\x2\xFFFF\x1\x42\x1\x2D\x1\xFFFF\x1\x35\x1\x48\x2\xFFFF";
		private const string DFA32_eofS =
			"\x4A\xFFFF";
		private const string DFA32_minS =
			"\x1\x9\x4\xFFFF\x1\x40\x5\xFFFF\x1\x30\x3\xFFFF\x3\x3D\x3\xFFFF\x1\x2A"+
			"\x1\xFFFF\x4\x30\x1\x2E\x6\xFFFF\x1\x30\x8\xFFFF\x2\x30\x1\xFFFF\x2\x30"+
			"\x1\xFFFF\x1\x30\x1\x2B\x1\xFFFF\x1\x2B\x1\xFFFF\xB\x30\x1\x2B\x1\xFFFF"+
			"\x4\x30\x1\x41\x2\xFFFF";
		private const string DFA32_maxS =
			"\x1\x7C\x4\xFFFF\x1\x40\x5\xFFFF\x1\x39\x3\xFFFF\x3\x3D\x3\xFFFF\x1\x2F"+
			"\x1\xFFFF\x4\x7A\x1\x66\x6\xFFFF\x1\x66\x8\xFFFF\x2\x7A\x1\xFFFF\x2\x7A"+
			"\x1\xFFFF\x2\x39\x1\xFFFF\x1\x39\x1\xFFFF\x3\x7A\x1\x66\x1\x39\x1\x66"+
			"\x1\x39\x1\x66\x3\x7A\x1\x39\x1\xFFFF\x2\x7A\x1\x39\x1\x66\x1\x7A\x2"+
			"\xFFFF";
		private const string DFA32_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\xFFFF\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xFFFF\x1\xD\x1\xE\x1\xF\x3\xFFFF\x1\x16\x1\x17\x1\x18\x1\xFFFF"+
			"\x1\x1A\x5\xFFFF\x1\x23\x1\x24\x1\x25\x1\x6\x1\x5\x1\xC\x1\xFFFF\x1\x10"+
			"\x1\x15\x1\x11\x1\x14\x1\x12\x1\x13\x1\x22\x1\x19\x2\xFFFF\x1\x1C\x2"+
			"\xFFFF\x1\x1F\x2\xFFFF\x1\x20\x1\xFFFF\x1\x21\xC\xFFFF\x1\x1B\x5\xFFFF"+
			"\x1\x1E\x1\x1D";
		private const string DFA32_specialS =
			"\x4A\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x2\x1C\x2\xFFFF\x1\x1C\x12\xFFFF\x1\x1C\x1\xF\x1\x1D\x1\xFFFF\x1\x1"+
				"\x1\x16\x1\xD\x1\x1E\x1\x2\x1\x3\x1\x14\x1\x12\x1\x4\x1\x13\x1\xB\x1"+
				"\x15\xA\x1B\x1\x7\x1\xFFFF\x1\x11\x1\xE\x1\x10\x1\x6\x1\x5\x1A\x1A\x1"+
				"\x8\x1\xFFFF\x1\x9\x1\xFFFF\x1\x1A\x1\xFFFF\x5\x1A\x1\x18\x5\x1A\x1"+
				"\x19\x7\x1A\x1\x17\x6\x1A\x1\xA\x1\xC",
				"",
				"",
				"",
				"",
				"\x1\x1F",
				"",
				"",
				"",
				"",
				"",
				"\xA\x22",
				"",
				"",
				"",
				"\x1\x23",
				"\x1\x25",
				"\x1\x27",
				"",
				"",
				"",
				"\x1\x29\x4\xFFFF\x1\x29",
				"",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x11\x2C\x1\x2B\x8"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1\x2E\x19\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\xE\x2C\x1\x2F\xB"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A\x2C",
				"\x1\x31\x1\xFFFF\xA\x1B\xB\xFFFF\x1\x32\x1F\xFFFF\x1\x32\x1\x33",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x22\xB\xFFFF\x1\x34\x1F\xFFFF\x1\x34\x1\x33",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x14\x2C\x1\x36\x5"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A\x2C",
				"",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\xB\x2C\x1\x37\xE"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x2\x2C\x1\x38\x17"+
				"\x2C",
				"",
				"\xA\x39",
				"\x1\x3A\x1\xFFFF\x1\x3A\x2\xFFFF\xA\x3B",
				"",
				"\x1\x3C\x1\xFFFF\x1\x3C\x2\xFFFF\xA\x3D",
				"",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x4\x2C\x1\x3E\x15"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x12\x2C\x1\x3F\x7"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1\x40\x19\x2C",
				"\xA\x39\xB\xFFFF\x1\x41\x1F\xFFFF\x1\x41\x1\x33",
				"\xA\x3B",
				"\xA\x3B\x2C\xFFFF\x1\x33",
				"\xA\x3D",
				"\xA\x3D\x2C\xFFFF\x1\x33",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x4\x2C\x1\x43\x15"+
				"\x2C",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\xB\x2C\x1\x44\xE"+
				"\x2C",
				"\x1\x45\x1\xFFFF\x1\x45\x2\xFFFF\xA\x46",
				"",
				"\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A\x2C",
				"\xA\x2C\x1\x47\x6\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A\x2C",
				"\xA\x46",
				"\xA\x46\x2C\xFFFF\x1\x33",
				"\x1A\x49\x4\xFFFF\x1\x49\x1\xFFFF\x1A\x49",
				"",
				""
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | CHECK | COLON | SQBRACKETOPEN | SQBRACKETCLOSE | SPECIALID | DOT | OR | AND | EQUALS | NOTEQUALS | GTEQ | LTEQ | LT | GT | NOT | PLUS | MINUS | MULT | DIV | MOD | BOOLEAN | ID | ATTRID | LOCAL | INT | FLOAT | DOUBLE | COMMENT | WS | STRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Sceelix.Designer.Graphs.ExpressionParsing
